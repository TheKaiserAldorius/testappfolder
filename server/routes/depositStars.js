require("dotenv").config();
const express = require("express");
const { Client } = require("pg");
const fetch = require("node-fetch");
const { validate, parse } = require('@telegram-apps/init-data-node');

const dbConfig = {
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
};

module.exports = (bot) => {
  const router = express.Router();

  router.post("/donate", async (req, res) => {
    const { username, casePrice, language = 'en' } = req.body;
    const initDataRaw = req.headers.authorization?.replace(/^tma\s+/i, "");
  
    if (casePrice === undefined) {
      return res.status(400).json({
        error: language === 'ru' ? "casePrice –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" : "casePrice is required"
      });
    }
  
    if (!initDataRaw) {
      return res.status(401).json({ error: "Missing initData" });
    }
  
    let parsed;
    let telegramUserId;
    try {
      validate(initDataRaw, process.env.BOT_TOKEN);
      parsed = parse(initDataRaw);
  
      // ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
      const now = Math.floor(Date.now() / 1000);
      const authAge = now - parsed.auth_date;
      if (authAge > 6000) {
        return res.status(403).json({ error: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç—ë–∫" });
      }
  
      // Extract user ID from parsed initData
      telegramUserId = parsed?.user?.id;
      
      if (!telegramUserId) {
        return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      }
  
    } catch (e) {
      console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData:", e);
      return res.status(403).json({ error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–ø—Ä–æ—Å" });
    }
  
    const client = new Client(dbConfig);
    await client.connect();
  
    try {
      // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const userResult = await client.query("SELECT * FROM users WHERE chat_id = $1", [telegramUserId]);
      if (userResult.rows.length === 0) {
        await client.query(
          `INSERT INTO users (chat_id, username, stars_count)
           VALUES ($1, $2, 0)
           ON CONFLICT (chat_id) DO NOTHING;`,
          [telegramUserId, username || "unknown"]
        );  
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUserId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î`);
      }
  
      // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const result = await client.query("SELECT stars_count FROM users WHERE chat_id = $1", [telegramUserId]);
      const user = result.rows[0];
  
      if (!user) {
        return res.status(404).json({
          error: language === 'ru' ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" : "User not found"
        });
      }
  
      const currentStars = user.stars_count;
      const required = casePrice;
      const needToBuy = required - currentStars;
  
      if (needToBuy <= 0) {
        return res.status(400).json({
          error: language === 'ru' ? "–£ –≤–∞—Å —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥" : "You already have enough stars"
        });
      }
  
      const amount = needToBuy;
      const prices = [{ label: language === 'ru' ? "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" : "Top Up", amount }];

      // üìå –ó–∞–ø—Ä–æ—Å –∫ Telegram API
      const response = await fetch(`https://api.telegram.org/bot${bot.token}/createInvoiceLink`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: language === 'ru' ? "üí´ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥" : "üí´ Top Up Stars",
          description: language === 'ru' ? `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ${needToBuy}‚≠ê –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏` : `You need ${needToBuy}‚≠ê to start the roulette`,
          payload: "stars_donation",
          provider_token: "", // Telegram Stars
          currency: "XTR",
          prices,
        }),
      });
  
      const invoice = await response.json();
  
      if (!invoice.ok || !invoice.result) {
        throw new Error(invoice.description || (language === 'ru' ? "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É" : "Failed to create payment link"));
      }
  
      console.log("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞:", invoice.result);
      res.status(200).json({ invoice_link: invoice.result });
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:", err);
      res.status(500).json({
        error: language === 'ru' ? "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞" : "Error while creating payment link"
      });
    } finally {
      await client.end();
    }
  });
  

  return router;
};
