require("dotenv").config();
const express = require("express");
const { Client } = require("pg");
const { validate, parse } = require('@telegram-apps/init-data-node');

const router = express.Router();

const dbConfig = {
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
};

router.post("/roulette/check-stars", async (req, res) => {
  const { casePrice } = req.body;
  const initDataRaw = req.headers.authorization?.replace(/^tma\s+/i, "");

  if (casePrice === undefined) {
    return res.status(400).json({ error: "casePrice –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  if (!initDataRaw) {
    return res.status(401).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç initData" });
  }

  let parsed;
  let telegramUserId;
  try {
    validate(initDataRaw, process.env.BOT_TOKEN); // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    parsed = parse(initDataRaw); // üßæ –†–∞–∑–±–æ—Ä initData –≤ –æ–±—ä–µ–∫—Ç

    // ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ initData
    const now = Math.floor(Date.now() / 1000);
    const authAge = now - parsed.auth_date;
    if (authAge > 600) { 
      return res.status(403).json({ error: "–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏" });
    }
    
    // Extract user ID from parsed initData
    telegramUserId = parsed?.user?.id;
    
    if (!telegramUserId) {
      return res.status(400).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }

  } catch (e) {
    console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π initData:", e);
    return res.status(403).json({ error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–ø—Ä–æ—Å" });
  }

  const client = new Client(dbConfig);
  await client.connect();

  try {
    const result = await client.query("SELECT stars_count FROM users WHERE chat_id = $1", [telegramUserId]);
    const user = result.rows[0];

    if (!user || user.stars_count < casePrice) {
      return res.status(403).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞" });
    }

    res.json({ success: true });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤—ë–∑–¥:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  } finally {
    await client.end();
  }
});

module.exports = router;
