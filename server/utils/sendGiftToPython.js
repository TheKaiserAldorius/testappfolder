require("dotenv").config();
const axios = require("axios");

const BOT_TOKEN = process.env.BOT_TOKEN;
const BUSINESS_CONNECTION_ID = process.env.BUSINESS_CONNECTION_ID;

// üîπ –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–µ
async function checkBalance() {
  try {
    const res = await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/getBusinessAccountStarBalance`,
      {
        business_connection_id: BUSINESS_CONNECTION_ID,
      }
    );

    const balance = res.data?.result?.star_count;
    console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç getBusinessAccountStarBalance:", res.data);

    if (balance === undefined) {
      console.warn("‚ùó balance (star_count) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ");
      return null;
    }

    console.log(`üåü –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} –∑–≤—ë–∑–¥`);
    return balance;
  } catch (err) {
    console.error("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.response?.data || err.message);
    return null;
  }
}

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (offset support)
async function getAvailableBusinessGifts() {
  try {
    let allGifts = [];
    let offset;

    while (true) {
      const res = await axios.post(
        `https://api.telegram.org/bot${BOT_TOKEN}/getBusinessAccountGifts`,
        {
          business_connection_id: BUSINESS_CONNECTION_ID,
          offset,
        }
      );

      const result = res.data?.result;
      const batch = result?.gifts || [];

      allGifts.push(...batch);

      if (!result?.next_offset) break;
      offset = result.next_offset;
    }

    console.log("üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤:", allGifts.length);
    return allGifts;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:", err.response?.data || err.message);
    return [];
  }
}

// üîπ –ù–∞–π—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∏ (startWith)
function findGiftByName(gifts, namePart) {
  const found = gifts.find(
    (g) =>
      g?.type === "unique" &&
      g?.can_be_transferred &&
      typeof g?.gift?.name === "string" &&
      g.gift.name.startsWith(namePart)
  );

  if (found) {
    console.log(`üéØ –ù–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ "${namePart}":`, found.gift.name);
  } else {
    console.warn(`‚ùå –ü–æ–¥–∞—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –Ω–∞ "${namePart}", –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    console.log("üìú –í—Å–µ –∏–º–µ–Ω–∞:", gifts.map((g) => g?.gift?.name).filter(Boolean));
  }

  return found;
}

// üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ Python-—Å–µ—Ä–≤–∏—Å
async function sendGiftToPython(ownedGiftId, chatId, giftName = null) {
  const payload = {
    owned_gift_id: ownedGiftId,
    new_owner_chat_id: Number(chatId),
    star_count: 25,
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Python:", payload);

  try {
    const response = await axios.post("http://gifter:5050/transfer-gift", payload);

    if (response.data.status === "success") {
      console.log(`üè± –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ "${giftName || ownedGiftId}" –¥–ª—è chat_id ${chatId}`);
    } else {
      console.warn("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç Python:", response.data);
    }

    return response.data;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Python:", err.response?.data || err.message);
    return { status: "error", message: err.message };
  }
}

module.exports = {
  checkBalance,
  getAvailableBusinessGifts,
  findGiftByName,
  sendGiftToPython,
};