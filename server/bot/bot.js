require("dotenv").config();
const { Client } = require("pg");
const express = require("express");
const { Telegraf } = require("telegraf");
const fetch = require("node-fetch");
const { InlineKeyboard } = require("telegraf");
const router = express.Router();

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

const bot = new Telegraf(BOT_TOKEN);

const dbConfig = {
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async function createUser(chatId, username) {
  const client = new Client(dbConfig);
  await client.connect();

  try {
    await client.query(
      `INSERT INTO users (chat_id, username, stars_count)
       VALUES ($1, $2, 0)
       ON CONFLICT (chat_id) DO NOTHING;`,
      [chatId, username]
    );
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (ID: ${chatId}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  } finally {
    await client.end();
  }
}


// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/start`
bot.start(async (ctx) => {
  const chatId = ctx.message.chat.id;
  const username = ctx.message.from.username || "unknown";
  const language = ctx.from?.language_code === "ru" ? "ru" : "en";
  const payload = ctx.startPayload || null;

  const validSources = ["Podarok", "Vseznayka", "Vanbay", "Gazz", "d1sha"];

  console.log(`üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${username} (${language}) (ID: ${chatId})`);

  // üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ ?start=Podarok, –∏ –µ—Å–ª–∏ —é–∑–µ—Ä –ù–ï –≤ users ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
  if (validSources.includes(payload)) {
    const client = new Client(dbConfig);
    await client.connect();

    try {
      const userInUsers = await client.query(
        `SELECT 1 FROM users WHERE chat_id = $1`,
        [chatId]
      );

      if (userInUsers.rowCount === 0) {
        await client.query(
          `INSERT INTO gift_channel_referrals (chat_id, source_name)
           VALUES ($1, $2)
           ON CONFLICT (chat_id) DO NOTHING;`,
          [chatId, payload]
        );
      } else {
        console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —É–∂–µ –µ—Å—Ç—å –≤ users ‚Äî –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ gift_channel_referrals`);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ gift_channel_referrals:", error);
    } finally {
      await client.end();
    }
  }

  await createUser(chatId, username); // üëà —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î

  // üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
  const texts = {
    ru: {
      caption: `üéÅ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Easy Gift!* üåü

–û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∑–∞ –∑–≤—ë–∑–¥—ã –∏ –ø–æ–ª—É—á–∞–π —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.

–í –Ω–∞—à–∏—Ö –∫–µ–π—Å–∞—Ö –≤—Å–µ–≥–¥–∞ –ª–µ–∂–∞—Ç —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∫ —Å–µ–±–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.

üöÄ *–ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É?* –ó–∞–ø—É—Å–∫–∞–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–π –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!`,
      appBtn: "üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
      channelBtn: "üì¢ –ù–∞—à –∫–∞–Ω–∞–ª",
    },
    en: {
      caption: `üéÅ *Welcome to Easy Gift!* üåü

Open cases using stars and receive upgraded gifts.

Even consolation prizes can be sold or sent to your account.

üöÄ Ready to test your luck?
Launch the mini app and start winning!`,
      appBtn: "üéÆ Open App",
      channelBtn: "üì¢ Our Channel",
    },
  };

  const locale = texts[language];

  try {
    await ctx.replyWithPhoto(
      "https://easygift.site/assets/logo-LRAo8M-j.webp",
      {
        caption: locale.caption,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: locale.appBtn,
                url: "https://t.me/EasyGiftDropbot?startapp",
              },
            ],
            [
              {
                text: locale.channelBtn,
                url: "https://t.me/EasyGiftNews",
              },
            ],
          ],
        },
      }
    );

    console.log("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
});



// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars
bot.on("message", async (ctx) => {
  const payment = ctx.message?.successful_payment;
  const userId = ctx.from?.id;

  if (!payment || !userId) return;

  const starsToAdd = payment.total_amount;

  const client = new Client(dbConfig);
  await client.connect();

  try {
    // ‚úÖ –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
    await client.query(
      "UPDATE users SET stars_count = stars_count + $1 WHERE chat_id = $2",
      [starsToAdd, userId]
    );

    // 2. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await client.query("SELECT id_user FROM users WHERE chat_id = $1", [userId]);
    const dbUser = userRes.rows[0];

    if (!dbUser) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
    }

    // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    await client.query(
      "INSERT INTO history_deposit (user_id, price, source, id_gift_number) VALUES ($1, $2, $3, $4)",
      [dbUser.id_user, starsToAdd, "donate", null]
    );    

    console.log(`üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${starsToAdd}‚≠ê`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤—ë–∑–¥:", err);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∑–≤—ë–∑–¥—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
  } finally {
    await client.end();
  }
});

bot.on("pre_checkout_query", async (ctx) => {
  try {
    await ctx.answerPreCheckoutQuery(true);
    console.log("üßæ pre_checkout_query –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:", err);
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
module.exports = {
  router,
  bot, // üëà —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –±–æ—Ç
}
