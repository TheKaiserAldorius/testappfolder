import React, { useState, useEffect } from "react";
import { initData, useSignal, useLaunchParams, openPopup, openTelegramLink, retrieveLaunchParams } from "@telegram-apps/sdk-react";
import { useSendGift } from "@/hooks/useSendGift";
import { useLanguage } from '@/components/LanguageContext';
import StarIcon from "../../../../assets/prize/StarsIcon.webp";
import DiceIcon from "../../../../assets/prize/dice.webp";
import "../../ModalPage/modal.page.css";
import { API_BASE_URL } from "@/config/api";

interface ModalPrizeProps {
  isOpen: boolean;
  winningItem: {
    id: string;
    img: string;
    price: number;
    model?: string;
    backdrop?: string;
    symbol?: string;
    collection?: string;
    chance?: string;
  } | null;
  onClose: () => void;
  onSell: () => void;
  idGiftNumber: number | null;
}

export const ModalPrize: React.FC<ModalPrizeProps> = ({
  isOpen,
  winningItem,
  onClose,
  onSell,
  idGiftNumber,
}) => {
  const initDataState = useSignal(initData.state);
  const user = initDataState?.user;
  const { platform } = useLaunchParams();
  const { language } = useLanguage();
  const { initDataRaw } = retrieveLaunchParams();

  useEffect(() => {
    if (platform === "ios" && isOpen) {
      const overlay = document.querySelector(".modal-overlay") as HTMLElement;
      if (overlay) {
        overlay.style.backdropFilter = "blur(8px)";
        overlay.style.backgroundColor = "rgba(0, 0, 0, 0.35)";
      }
    }
  }, [platform, isOpen]);

  const isRare = winningItem?.id === "9997";
  const [isSending, setIsSending] = useState(false);
  const { sendGift } = useSendGift(idGiftNumber || undefined);

  if (!isOpen || !winningItem) return null;

  const handleClaimPrize = async () => {
    if (!user?.id || !winningItem || !idGiftNumber) {
      await openPopup({
        title: language === 'ru' ? "–û—à–∏–±–∫–∞" : "Error",
        message: language === 'ru' ? "–ü–æ–¥–∞—Ä–æ–∫ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã." : "Gift or user not defined.",
        buttons: [{ id: "ok", type: "default", text: "OK" }],
      });
      return;
    }

    if (isRare) {
      setIsSending(true);
    
      const confirm = await openPopup({
        title: language === 'ru' ? "–ü–µ—Ä–µ—Ö–æ–¥ –≤ Telegram" : "Open Telegram",
        message: language === 'ru'
          ? "–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫!\n\n–ß—Ç–æ–±—ã –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç–µ @easygifter.\n\n–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–û—Ç–∫—Ä—ã—Ç—å Telegram¬ª –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
          : "You just won a rare gift!\n\nTo claim it, please message us in the @easygifter chat.\n\nOnce you tap \"Open Telegram\", this action cannot be undone.",
        buttons: [
          { id: "open", type: "default", text: language === 'ru' ? "–û—Ç–∫—Ä—ã—Ç—å Telegram" : "Open Telegram" },
          { id: "cancel", type: "destructive", text: language === 'ru' ? "–û—Ç–º–µ–Ω–∞" : "Cancel" }
        ]
      });

      if (confirm !== "open") {
        setIsSending(false);
        return;
      }

      const res = await fetch(`${API_BASE_URL}/rare/send-rare-gift`, {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "Authorization": `tma ${initDataRaw}`
        },
        body: JSON.stringify({
          id_gift_number: idGiftNumber,
          gift_id: winningItem?.id,
          extra: {
            collection: winningItem?.collection,
            model: winningItem?.model,
            backdrop: winningItem?.backdrop,
            symbol: winningItem?.symbol,
          },
          language
        }),
      });
    
      if (res.status === 409) {
        await openPopup({
          title: language === 'ru' ? "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" : "Gift Unavailable",
          message: language === 'ru'
            ? "–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            : "This gift is already being processed. Please wait.",
          buttons: [{ id: "ok", type: "default", text: "OK" }],
        });
        setIsSending(false);
        return;
      }
    
      const result = await res.json();
    
      if (!result.success) {
        await openPopup({
          title: language === 'ru' ? "–û—à–∏–±–∫–∞" : "Error",
          message: result.error || (language === 'ru' ? "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫." : "Something went wrong."),
          buttons: [{ id: "ok", type: "default", text: "OK" }],
        });
        setIsSending(false);
        return;
      }
    
      if (confirm === "open") {
        const message = encodeURIComponent(
          language === 'ru'
            ? `[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n\nüéÅ –Ø –≤—ã–∏–≥—Ä–∞–ª —Ä–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫!\nID –ø–æ–¥–∞—Ä–∫–∞: ${winningItem?.id}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ä—É—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Ä—É—á–∏—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n\n‚Äî Easy Gift`
            : `[Auto-generated message]\n\nüéÅ I've won a rare gift!\nGift ID: ${winningItem?.id}\n\nPlease confirm the delivery by sending this message.\nThe gift is already visible in your activity history in the app.\n\nWe'll try to deliver it as soon as possible!\n\n‚Äî Easy Gift`
        );
        openTelegramLink(`https://t.me/easygifter?start&text=${message}`);
      }
    
      onClose();
      return;
    }

    const confirm = await openPopup({
      title: language === 'ru' ? "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" : "Confirm",
      message: language === 'ru'
        ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫?\n–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–ª—å–∑—è –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –∑–≤—ë–∑–¥—ã`
        : `Are you sure you want to claim this gift?\nThis gift cannot be exchanged for stars.`,
      buttons: [
        { id: "yes", type: "default", text: language === 'ru' ? "OK" : "OK" },
        { id: "no", type: "destructive", text: language === 'ru' ? "–û—Ç–º–µ–Ω–∞" : "Cancel" },
      ],
    });

    if (confirm !== "yes") return;

    setIsSending(true);
    const result = await sendGift();

    await openPopup({
      title: result?.success ? (language === 'ru' ? "–£—Å–ø–µ—Ö" : "Success") : (language === 'ru' ? "–û—à–∏–±–∫–∞" : "Error"),
      message: result?.success
        ? (language === 'ru' ? `üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!` : `üéÅ Gift sent!`)
        : result?.error || (language === 'ru' ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" : "Unknown error"),
      buttons: [{ id: "ok", type: "default", text: "OK" }],
    });

    if (result?.success) {
      onClose();
    } else {
      setIsSending(false);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-box">
        <button className="modal-close" onClick={onClose}>√ó</button>
        <h2>{language === 'ru' ? "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!" : "You've won a gift!"}</h2>
        <p>{language === 'ru' ? "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?" : "What would you like to do with it?"}</p>
        <img src={winningItem.img} alt="gift" className="modal-gift" />
        <div className="modal-stars">
          <img src={DiceIcon} alt="star" />
          {winningItem.chance || "??"}
        </div>
        <div className="modal-actions">
          <button onClick={handleClaimPrize} className="modal-button claim" disabled={isSending}>
            {language === 'ru' ? "–ü–æ–ª—É—á–∏—Ç—å" : "Claim"}
          </button>
          <button onClick={onSell} className="modal-button sell" disabled={isSending}>
            {language === 'ru' ? "–ü—Ä–æ–¥–∞—Ç—å –∑–∞" : "Sell for"} {winningItem.price}
            <img src={StarIcon} alt="star"/>
          </button>
        </div>
      </div>
    </div>
  );
};
